<?php

/**
 * @file
 * Stanford Alt Check Module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_alt_check_ctools_plugin_api($owner, $api) {
  if ($owner == "context" && $api == "context") {
    return array("version" => 3);
  }
}

/**
 * Implements hook_menu().
 */
function stanford_alt_check_menu() {
  $items = array();
  $items['admin/content/images'] = array(
    'title' => "Images",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_image_uploads'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/images/uploads'] = array(
    'title' => "Image Uploads",
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/content/images/wysiwyg'] = array(
    'title' => "WYSIWYG Images",
    'page callback' => 'stanford_alt_check_image_wysiwyg',
    'access arguments' => array('access content overview'),
    'type' => MENU_LOCAL_TASK,
  );

  // Manage Content Menu Items.
  $items['admin/images'] = array(
    'title' => "Manage Images",
    'page callback' => 'stanford_alt_check_images',
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-manage-content-by-type',
  );
  $items['admin/images/uploads'] = array(
    'title' => "Manage Image Uploads",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_image_uploads'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-manage-content-by-type',
  );
  $items['admin/images/wysiwyg'] = array(
    'title' => "Manage WYSIWYG Images",
    'page callback' => 'stanford_alt_check_image_wysiwyg',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-manage-content-by-type',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function stanford_alt_check_theme($existing, $type, $theme, $path) {
  return array(
    'stanford_alt_check_image_uploads' => array(
      'render element' => 'form',
      'file' => 'stanford_alt_check.theme.inc',
    ),
  );
}

/**
 * Menu callback to display list of entities with missing alt attributes.
 *
 * @return array
 *   Render array of the table of entities.
 */
function stanford_alt_check_image_wysiwyg() {
  drupal_set_title(t("WYSIWYG Images"));
  $all_entities = stanford_alt_check_get_wysiwyg();
  $rows = array();

  foreach ($all_entities as $field_name => $types) {
    foreach ($types as $type => $bundles) {
      foreach ($bundles as $bundle => $entities) {
        $field_instance = field_info_instance($type, $field_name, $bundle);

        foreach ($entities as $entity) {
          if (!($item = stanford_alt_check_get_host($entity, $type))) {
            continue;
          }
          list($e, $t, , , $ebundle) = $item;

          // Beans use label property as the identifier.
          if ($t == 'bean') {
            $title = $e->label;
          }
          else {
            $title = $e->title;
          }

          $entity_info = entity_get_info($t);
          $uri = entity_uri($t, $e);

          // Check if the entity has a standard edit path & user has access.
          if (drupal_valid_path($uri['path'] . '/edit') && entity_access('update', $t, $e)) {
            $uri['path'] = $uri['path'] . '/edit';
          }

          // Cut title down if its super long.
          if (strlen($title) > 50) {
            $title = substr($title, 0, 50) . "...";
          }

          $rows[] = array(
            'Entity' => l(t($title), $uri['path']),
            'Field' => $field_instance['label'],
            'Type' => $entity_info['label'],
            'Bundle' => $entity_info['bundles'][$ebundle]['label'],
          );
        }
      }
    }
  }

  // Sort based on get parameters.
  usort($rows, 'stanford_alt_check_sort_rows');

  // Establishes the pager.
  $current_page = pager_default_initialize(count($rows), 25);
  $chunks = array_chunk($rows, 125, TRUE);

  $output['message'] = array(
    '#markup' => t('<p>Below are a list of entities that have an image embeded in html with a missing ALT attribute. Please view and edit the entity directly to correct these errors.</p>')
  );
  $output['table'] = array(
    '#theme' => 'table',
    '#header' => array(
      array('data' => t('Entity'), 'field' => 'entity'),
      array('data' => t('Field'), 'field' => 'field'),
      array('data' => t('Type'), 'field' => 'type'),
      array('data' => t('Bundle'), 'field' => 'bundle'),
    ),
    '#rows' => $chunks[$current_page],
  );
  $output['pager'] = array(
    '#theme' => 'pager',
  );
  return $output;
}

/**
 * Gets all entities with missing wywisyg image alts.
 *
 * @return array
 *   Entities with missing alt attributes in wysiwyg fields.
 */
function stanford_alt_check_get_wysiwyg() {
  $image_fields = array();
  $wywisyg_field_types = array('text', 'text_long', 'text_with_summary');
  foreach (field_info_fields() as $field) {
    $types[$field['type']] = $field['type'];
    if (in_array($field['type'], $wywisyg_field_types)) {
      foreach ($field['bundles'] as $type => $bundles) {
        foreach ($bundles as $bundle) {
          $instance = field_info_instance($type, $field['field_name'], $bundle);
          if ($instance['settings']['text_processing']) {
            $image_fields[] = $field;
          }
        }
      }
    }
  }

  $return_data = array();
  foreach ($image_fields as $field) {
    $query = new EntityFieldQuery();
    $query->fieldCondition($field['field_name'], 'value', '%<img%', 'like');
    $results = $query->execute();
    foreach ($results as $type => $entities) {
      foreach (entity_load($type, array_keys($entities)) as $id => $entity) {
        if ($field_items = field_get_items($type, $entity, $field['field_name'])) {
          foreach ($field_items as $item) {
            $dom = new DOMDocument();
            $dom->loadHTML($item['value']);
            /** @var DOMElement $img_element */
            foreach ($dom->getElementsByTagName('img') as $img_element) {
              if (!$img_element->getAttribute('alt')) {
                list(, , $bundle) = entity_extract_ids($type, $entity);
                $return_data[$field['field_name']][$type][$bundle][$id] = $entity;
              }
            }
          }
        }
      }
    }
  }
  return $return_data;
}

/**
 * Gets the fields and entities with missing alt attributes.
 *
 * @return array
 *   Keyed array of fields and entities with missing alt attributes.
 *   First set of array keys are the field machine name used. Second key is the
 *   entity type. Then 3rd key is the entity id. The value of the 3rd key is the
 *   entity to be used.
 *   Ex. array('field_image' => array('node' => array(10 => [Node Object])))
 */
function stanford_alt_check_upload_entities() {
  $image_fields = array();
  // Get all image type fields.
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'image') {
      $image_fields[] = $field;
    }
  }

  $return_data = array();
  // Gets all entities where the image alt attribute is missing.
  foreach ($image_fields as $field) {
    $query = new EntityFieldQuery();
    $query->fieldCondition($field['field_name'], 'alt', '', '=');
    $results = $query->execute();

    foreach ($results as $type => $result_entities) {
      foreach (entity_load($type, array_keys($result_entities)) as $entity) {
        list($id, , $bundle) = entity_extract_ids($type, $entity);
        $return_data[$field['field_name']][$type][$bundle][$id] = $entity;
      }
    }
  }
  return $return_data;
}

/**
 * Menu callback to display all entities with missing alt attributes.
 *
 * @return array
 *   Render array with the table.
 */
function stanford_alt_check_images() {
  $output = array();
  $output['message'] = array(
    '#markup' => t('<p>Below are a list of entities that have an image with a missing ALT attribute. Please view and edit the entity to correct these errors.</p>')
  );
  $rows = stanford_alt_check_build_rows(stanford_alt_check_get_wysiwyg());
  $rows = stanford_alt_check_build_rows(stanford_alt_check_upload_entities(), $rows);

  // Sort based on get parameters.
  usort($rows, 'stanford_alt_check_sort_rows');

  // Pager.
  $current_page = pager_default_initialize(count($rows), 25);
  $chunks = array_chunk($rows, 25, TRUE);
  $output['table'] = array(
    '#theme' => 'table',
    '#header' => array(
      array('data' => t('Entity'), 'field' => 'Entity'),
      array('data' => t('Field'), 'field' => 'Field'),
      array('data' => t('Entity Type'), 'field' => 'Entity Type'),
      array('data' => t('Bundle'), 'field' => 'Bundle'),
    ),
    '#rows' => $chunks[$current_page],
  );
  $output['pager'] = array(
    '#theme' => 'pager',
  );
  return $output;
}

/**
 * Process the entity list to build table rows.
 *
 * @param array $data
 *   Entity data to parse.
 * @param array $rows
 *   Existing rows to add to.
 *
 * @return array
 *   Simple array to be used in tables.
 */
function stanford_alt_check_build_rows(array $data, array $rows = array()) {
  foreach ($data as $field_name => $types) {
    foreach ($types as $type => $bundles) {
      foreach ($bundles as $bundle => $entities) {
        $field_instance = field_info_instance($type, $field_name, $bundle);
        $field_name = $field_instance['label'];

        foreach ($entities as $id => $entity) {
          if (!($item = stanford_alt_check_get_host($entity, $type))) {
            continue;
          }
          list($e, $t, $eid, , $ebundle) = $item;
          if ($t == 'bean') {
            $title = $e->label;
          }
          else {
            $title = $e->title;
          }

          $path = entity_uri($t, $e);
          $e_info = entity_get_info($t);

          // Concat other fields to the field list.
          if (isset($rows["$t-$eid"])) {
            $efields = explode('; ', $rows["$t-$eid"]['Field']);
            if (!in_array($field_name, $efields)) {
              $efields[] = $field_name;
            }
            $rows["$t-$eid"]['Field'] = implode('; ', $efields);
          }
          else {
            // Build row with first field.
            $rows["$type-$eid"] = array(
              'Entity' => l(t($title), $path['path']),
              'Field' => $field_name,
              'Entity Type' => $e_info['label'],
              'Bundle' => $e_info['bundles'][$ebundle]['label'],
            );
          }
        }
      }
    }
  }
  return $rows;
}

/**
 * Sort function to sort arrays with strings based on GET parameters.
 *
 * @param array $a
 *   Array 1 to compare.
 * @param array $b
 *   Array 2 to compare.
 *
 * @return int
 *   Order of the two arrays.
 */
function stanford_alt_check_sort_rows(array $a, array $b) {
  $get = drupal_get_query_parameters($_GET);

  // Check if we are to order specifically and if the keys exist to order on.
  if (isset($get['order']) && isset($a[$get['order']]) && isset($b[$get['order']])) {
    // Which direction.
    if (!isset($get['sort']) || $get['sort'] == 'asc') {
      return strcmp(strip_tags($a[$get['order']]), strip_tags($b[$get['order']]));
    }
    return strcmp(strip_tags($b[$get['order']]), strip_tags($a[$get['order']]));
  }

  // Fallback: sort by first element of each array.
  return strcmp(strip_tags($a[key($a)]), strip_tags($b[key($b)]));
}

/**
 * Recursive function that will continue down to the greates host entity.
 *
 * @param object $entity
 *   The actual entity to get host data from.
 * @param string $type
 *   The type of the entity we are inspecting.
 *
 * @return array|bool
 *   Array of host entity data or FALSE if it fails to obtain host.
 */
function stanford_alt_check_get_host($entity, $type) {
  $e = $t = NULL;
  switch ($type) {
    case 'field_collection_item':
      // Field Collection entities: Change $t & $e to host entity.
      $e = $entity->hostEntity();
      $t = $entity->hostEntityType();
      if (!($item = stanford_alt_check_get_host($e, $t))) {
        return FALSE;
      }
      list($e, $t) = $item;
      break;

    case 'paragraphs_item':
      // Paragraph Item entities: Change $t & $e to host entity.
      // We use field query because the
      // ParagraphsItemEntity::hostEntityType() &
      // ParagraphsItemEntity::hostEntity() do not always work.
      $query = new EntityFieldQuery();
      $query->fieldCondition($entity->field_name, 'value', $entity->item_id);
      if ($results = $query->execute()) {
        $types = array_keys($results);
        $t = reset($types);
        $es = entity_load($t, array_keys($results[$t]));
        $e = reset($es);
        if (!($item = stanford_alt_check_get_host($e, $t))) {
          return FALSE;
        }
        list($e, $t) = $item;
      }
      break;

    default:
      $t = $type;
      $e = $entity;
      break;
  }

  if ($e && $t) {
    list($id, $vid, $bundle) = entity_extract_ids($t, $e);
    return array($e, $t, $id, $vid, $bundle);
  }
  return FALSE;
}
