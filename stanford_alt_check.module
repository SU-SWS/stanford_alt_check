<?php

/**
 * @file
 * Stanford Alt Check Module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_alt_check_ctools_plugin_api($owner, $api) {
  if ($owner == "context" && $api == "context") {
    return array("version" => 3);
  }
}

/**
 * Implements hook_menu().
 */
function stanford_alt_check_menu() {
  $items = array();
  $items['admin/content/images'] = array(
    'title' => "Images",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_form'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Manage Content Menu Items.
  $items['admin/images'] = array(
    'title' => "Manage Images",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_form'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-manage-content-by-type',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function stanford_alt_check_theme($existing, $type, $theme, $path) {
  return array(
    'stanford_alt_check_form' => array(
      'render element' => 'form',
      'file' => 'stanford_alt_check.theme.inc',
    ),
  );
}

/**
 * Sort function to sort arrays with strings based on GET parameters.
 *
 * @param array $array_a
 *   Array 1 to compare.
 * @param array $array_b
 *   Array 2 to compare.
 *
 * @return int
 *   Order of the two arrays.
 */
function stanford_alt_check_sort_rows(array $array_a, array $array_b) {
  $get = drupal_get_query_parameters($_GET);

  // Check if we are to order specifically and if the keys exist to order on.
  if (isset($get['order']) && isset($array_a[$get['order']]) && isset($array_b[$get['order']])) {
    // Which direction.
    if (!isset($get['sort']) || $get['sort'] == 'asc') {
      return strcmp(strip_tags($array_a[$get['order']]), strip_tags($array_b[$get['order']]));
    }
    return strcmp(strip_tags($array_b[$get['order']]), strip_tags($array_a[$get['order']]));
  }

  // Fallback: sort by first element of each array.
  return strcmp(strip_tags($array_a[key($array_a)]), strip_tags($array_b[key($array_b)]));
}

/**
 * Recursive function that will continue down to the greates host entity.
 *
 * @param object $entity
 *   The actual entity to get host data from.
 * @param string $type
 *   The type of the entity we are inspecting.
 *
 * @return array|bool
 *   Array of host entity data or FALSE if it fails to obtain host.
 */
function stanford_alt_check_get_host($entity, $type) {
  $host_entity = $host_type = NULL;
  switch ($type) {
    case 'field_collection_item':
      // Field Collection entities: Change $host_type & $host_entity to host
      // entity.
      $host_entity = $entity->hostEntity();
      $host_type = $entity->hostEntityType();
      if (!($item = stanford_alt_check_get_host($host_entity, $host_type))) {
        return FALSE;
      }
      list($host_entity, $host_type) = $item;
      break;

    case 'paragraphs_item':
      // Paragraph Item entities: Change $host_type& $host_entityto host entity.
      // We use field query because the
      // ParagraphsItemEntity::hostEntityType() &
      // ParagraphsItemEntity::hostEntity() do not always work.
      $query = new EntityFieldQuery();
      $query->fieldCondition($entity->field_name, 'value', $entity->item_id);
      if ($results = $query->execute()) {
        $types = array_keys($results);
        $host_type = reset($types);
        $entity_loaded = entity_load($host_type, array_keys($results[$host_type]));
        $host_entity = reset($entity_loaded);
        if (!($item = stanford_alt_check_get_host($host_entity, $host_type))) {
          return FALSE;
        }
        list($host_entity, $host_type) = $item;
      }
      break;

    default:
      $host_type = $type;
      $host_entity = $entity;
      break;
  }

  if ($host_entity && $host_type) {
    $meta = _stanford_alt_check_get_host_meta($host_type, $host_entity);
    return array(
      $host_entity,
      $host_type,
      $meta['id'],
      $meta['title'],
      $meta['uri'],
      $meta['status'],
    );
  }
  return FALSE;
}

/**
 * Parse the entity to obtain the data we need.
 *
 * @param string $type
 *   The type of the entity.
 * @param object $entity
 *   Entity to get data from.
 *
 * @return array
 *   Keyed array of the needed data
 */
function _stanford_alt_check_get_host_meta($type, $entity) {
  list($entity_id, ,) = entity_extract_ids($type, $entity);

  $title = $entity->title;
  // Beans use label property instead.
  if ($type == 'bean') {
    $title = $entity->label;
  }

  // All entities that don't have status property.
  $published = 'Yes';
  // Mainly nodes which have status.
  if (isset($entity->status) && !$entity->status) {
    $published = 'No';
  }

  $uri = entity_uri($type, $entity);
  return array(
    'id' => $entity_id,
    'title' => $title,
    'uri' => $uri['path'],
    'status' => $published,
  );
}
