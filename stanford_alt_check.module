<?php

/**
 * @file
 * Stanford Alt Check Module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_alt_check_ctools_plugin_api($owner, $api) {
  if ($owner == "context" && $api == "context") {
    return array("version" => 3);
  }
}

/**
 * Implements hook_menu().
 */
function stanford_alt_check_menu() {
  $items = array();
  $items['admin/content/images'] = array(
    'title' => "Images",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_form'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Manage Content Menu Items.
  $items['admin/images'] = array(
    'title' => "Manage Images",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_alt_check_form'),
    'file' => 'stanford_alt_check.forms.inc',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-manage-content-by-type',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function stanford_alt_check_theme($existing, $type, $theme, $path) {
  return array(
    'stanford_alt_check_form' => array(
      'render element' => 'form',
      'file' => 'stanford_alt_check.theme.inc',
    ),
  );
}

/**
 * Recursive function that will continue down to the greates host entity.
 *
 * @param object $entity
 *   The actual entity to get host data from.
 * @param string $type
 *   The type of the entity we are inspecting.
 *
 * @return array|bool
 *   Array of host entity data or FALSE if it fails to obtain host.
 */
function stanford_alt_check_get_host($entity, $type) {
  $host_entity = $host_type = NULL;
  switch ($type) {
    case 'field_collection_item':
      // Field Collection entities: Change $host_type & $host_entity to host
      // entity.
      $host_entity = $entity->hostEntity();
      $host_type = $entity->hostEntityType();
      if (!($item = stanford_alt_check_get_host($host_entity, $host_type))) {
        return FALSE;
      }
      list($host_entity, $host_type) = $item;
      break;

    case 'paragraphs_item':
      // Paragraph Item entities: Change $host_type& $host_entityto host entity.
      // We use field query because the
      // ParagraphsItemEntity::hostEntityType() &
      // ParagraphsItemEntity::hostEntity() do not always work.
      $query = new EntityFieldQuery();
      $query->fieldCondition($entity->field_name, 'value', $entity->item_id);
      if ($results = $query->execute()) {
        $types = array_keys($results);
        $host_type = reset($types);
        $entity_loaded = entity_load($host_type, array_keys($results[$host_type]));
        $host_entity = reset($entity_loaded);
        if (!($item = stanford_alt_check_get_host($host_entity, $host_type))) {
          return FALSE;
        }
        list($host_entity, $host_type) = $item;
      }
      break;

    default:
      $host_type = $type;
      $host_entity = $entity;
      break;
  }

  if ($host_entity && $host_type) {
    $meta = _stanford_alt_check_get_host_meta($host_type, $host_entity);
    return array(
      $host_entity,
      $host_type,
      $meta['id'],
      $meta['title'],
      $meta['uri'],
      $meta['status'],
    );
  }
  return FALSE;
}

/**
 * Parse the entity to obtain the data we need.
 *
 * @param string $type
 *   The type of the entity.
 * @param object $entity
 *   Entity to get data from.
 *
 * @return array
 *   Keyed array of the needed data
 */
function _stanford_alt_check_get_host_meta($type, $entity) {
  list($entity_id, ,) = entity_extract_ids($type, $entity);

  $title = $entity->title;
  // Beans use label property instead.
  if ($type == 'bean') {
    $title = $entity->label;
  }

  // All entities that don't have status property.
  $published = 1;
  // Mainly nodes which have status.
  if (isset($entity->status)) {
    $published = $entity->status;
  }

  $uri = entity_uri($type, $entity);
  return array(
    'id' => $entity_id,
    'title' => $title,
    'uri' => $uri['path'],
    'status' => $published,
  );
}

/**
 * Implements hook_entity_insert().
 */
function stanford_alt_check_entity_insert($entity, $type) {
  list($id, , $bundle) = entity_extract_ids($type, $entity);
  list($host_entity, $host_type, $host_id, $host_title, $host_uri, $host_status) = stanford_alt_check_get_host($entity, $type);
  _stanford_alt_check_clear_entity($entity, $type);
  $images = _stanford_alt_check_entity_images($entity, $type, $bundle);

  foreach ($images as $field_type => $fields) {
    foreach ($fields as $field_name => $deltas) {
      foreach ($deltas as $delta => $field_images) {
        foreach ($field_images as $position => $image) {
          $record = array(
            'thumbnail' => $image['uri'],
            'alt_text' => $image['alt'],
            'entity_id' => $id,
            'entity_type' => $type,
            'entity_field' => $field_name,
            'entity_field_wysiwyg' => $field_type == 'wysiwyg',
            'host_title' => $host_title,
            'host_changed' => $host_entity->changed,
            'host_published' => $host_status,
            'image_meta' => array(
              'position' => $position,
              'host_uri' => $host_uri
            ),
          );
          drupal_write_record('stanford_alt_check', $record);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function stanford_alt_check_entity_update($entity, $type) {
  stanford_alt_check_entity_insert($entity, $type);
}

/**
 * Implements hook_entity_delete().
 */
function stanford_alt_check_entity_delete($entity, $type) {
  _stanford_alt_check_clear_entity($entity, $type);
}

function _stanford_alt_check_clear_entity($entity, $type) {
  list($id, ,) = entity_extract_ids($type, $entity);
  db_delete('stanford_alt_check')
    ->condition('entity_id', $id)
    ->condition('entity_type', $type)
    ->execute();
}

function _stanford_alt_check_entity_images($entity, $type, $bundle) {
  $images = array();
  $text_fields = array('text', 'text_long', 'text_with_summary');
  foreach (field_info_instances($type, $bundle) as $field_name => $instance) {
    $field = field_info_field($field_name);
    if (in_array($field['type'], $text_fields) && $instance['settings']['text_processing']) {
      // WYSIWYG Field.
      if ($items = field_get_items($type, $entity, $field_name)) {
        $images['wysiwyg'][$field_name] = _stanford_alt_check_wysiwyg_images($items);
      }
      continue;
    }

    if ($field['type'] == 'image') {
      // Image Field.
      if ($items = field_get_items($type, $entity, $field_name)) {
        $images['upload'][$field_name] = _stanford_alt_check_upload_images($items);
      }
    }
  }
  return $images;
}

function _stanford_alt_check_upload_images($items) {
  $images = array();
  foreach ($items as $delta => $item) {
    $file = file_load($item['fid']);
    $images[$delta][0] = array('uri' => $file->uri, 'alt' => $file->alt);
  }
  return $images;
}

function _stanford_alt_check_wysiwyg_images($items) {
  $images = array();
  foreach ($items as $delta => $item) {


    $dom = new DOMDocument();
    libxml_use_internal_errors(TRUE);
    $dom->loadHTML(check_markup($item['value'], $item['format']));

    /** @param DOMElement $image */
    foreach ($dom->getElementsByTagName('img') as $position => $image) {
      $images[$delta][$position] = _stanford_alt_check_wysiwyg_image($image);
    }
  }
  return $images;
}

function _stanford_alt_check_wysiwyg_image(DOMElement $image) {
  $alt = $image->getAttribute('alt');
  $src = $image->getAttribute('src');

  $src_parts = parse_url($src);
  $uri = $src;

  global $base_url;
  if (!isset($src_parts['host']) || strpos($base_url, $src_parts['host']) !== FALSE) {
    if (strpos($src_parts['path'], '/styles/') !== FALSE) {
      // Image derivative.
      $exploded = explode('/', $src_parts['path']);
      $style_pos = array_search('styles', $exploded) + 3;
      $src = '//' . implode('/', array_slice($exploded, $style_pos));
    }
    else {
      // Original Image.
      $src = str_replace(variable_get('file_public_path'), '', $src_parts['path']);
      $src = str_replace(variable_get('file_private_path'), '', $src);
      $src = '//' . trim($src, '/');
    }
  }

  $fid = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', "%$src", 'like')
    ->execute()
    ->fetchField();

  if ($fid) {
    $file = file_load($fid);
    $uri = $file->uri;
  }
  return array('uri' => $uri, 'alt' => $alt);
}